{"name": "test_Login[case1]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <testcase.test_zr.Test_zrlog object at 0x0000014C0E7B1CA0>\ncase = {'': '', 'data': '', 'header': '', 'method': '', ...}\n\n    @pytest.mark.parametrize(\"case\", res)\n    def test_Login(self, case):\n>       result = Test_zrlog.reaDcase(case)\n\ntest_zr.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\supermrthod.py:18: in reaDcase\n    header =json.loads(case['header'])\nE:\\python\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nE:\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000014C0644DF10>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nE:\\python\\lib\\json\\decoder.py:355: JSONDecodeError"}, "parameters": [{"name": "case", "value": "{'用例编号': '', '用例名称': '', 'method': '', 'url': '', 'header': '', 'data': '', '': '', '实际结果': \"2022-08-04 17:26:45,670 - test_create.py[line:23] - INFO - 新增-2新增测试用例{'code': 200, 'body': {'data': {'version': 0, 'alias': '新增测试3', 'logId': 2, 'thumbnail': None, 'rubbish': True, 'digest': '<p>新增测试用例1</p>'}, 'message': None, 'error': 0}, 'cookies': {'admin-token': '1#357051304736335749314B68675879356A57435733455858316C597577484B6376437636515564347976727569672B53774F717A466A3852523178644955693766383355354763376E38586A69614436674858474938584E447958656254692B636B45585A416D4E3241493D'}},\\n\"}"}], "start": 1659605263428, "stop": 1659605263428, "uuid": "3318d047-18a9-4d0f-a346-427b98c92664", "historyId": "ff9e2e16b15951c5c9e3916e87ad1b1a", "testCaseId": "71937e17d847f0126e9c3a71a7302b2b", "fullName": "testcase.test_zr.Test_zrlog#test_Login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_zr"}, {"name": "subSuite", "value": "Test_zrlog"}, {"name": "host", "value": "PC-20200812QIHW"}, {"name": "thread", "value": "30364-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_zr"}]}