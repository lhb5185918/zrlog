{"name": "test_Login[case2]", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'status_code'", "trace": "self = <testcase.test_zr.Test_zrlog object at 0x00000200D2D55DC0>\ncase = {'': '', 'data': '', 'header': '', 'method': '', ...}\n\n    @pytest.mark.parametrize(\"case\", res)\n    def test_Login(self, case):\n        result = Test_zrlog.reaDcase(case)\n>       res = Requests().send(url=result['url'],\n                              data=result['data'],\n                              method=result['method'],\n                              header=result['header'])\n\ntest_zr.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\util\\requestsutil.py:37: in send\n    return self.api_run(url=url, method=method, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <util.requestsutil.Requests object at 0x00000200D2D55970>, url = ''\nmethod = '', data = None, header = '', cookie = None, file = None\nfilename = None, file_path = None\n\n    def api_run(self, url, method, data=None, header=None, cookie=None, file=None, filename=None,\n                file_path=None):  # 定义接口输入\n        res = None\n        # logger.info(\"请求的url为{}，类型为{}\".format(url, type(url)))\n        # logger.info(\"请求的method为{}，类型为{}\".format(method, type(method)))\n        # logger.info(\"请求的data为{}，类型为{}\".format(data, type(data)))\n        # logger.info(\"请求的header为{}，类型为{}\".format(header, type(header)))\n        if method == \"get\":\n            res = requests.get(url, data=data, headers=header, cookies=cookie)\n        elif method == \"post\":\n            if file != None:\n                files = {str(file): (str(filename), open(str(file_path), 'rb'),\n                                     'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}\n                res = requests.post(url=url, headers=header, files=files, data=data)\n            elif \"content-type\" not in header:\n                res = requests.post(url=url, headers=header, data=data)\n            else:\n                res = requests.post(url, json=data, headers=header, cookies=cookie)\n>       code = res.status_code\nE       AttributeError: 'NoneType' object has no attribute 'status_code'\n\n..\\util\\requestsutil.py:24: AttributeError"}, "parameters": [{"name": "case", "value": "{'用例编号': '', '用例名称': '', 'method': '', 'url': '', 'header': '', 'data': '', '': '', '实际结果': \"2022-08-04 16:37:03,206 - test_zr.py[line:37] - INFO - 新增-3新增测试用例{'code': 200, 'body': {'stack': 'java.lang.RuntimeException: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $\\\\n\\\\tat com.zrlog.util.ZrLogUtil.convertRequestBody(ZrLogUtil.java:41)\\\\n\\\\tat com.zrlog.admin.web.controller.api.AdminArticleController.create(AdminArticleController.java:43)\\\\n\\\\tat jdk.internal.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)\\\\n\\\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\\\n\\\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\\\n\\\\tat com.jfinal.aop.Invocation.invoke(Invocation.java:97)\\\\n\\\\tat com.zrlog.admin.web.interceptor.AdminInterceptor.tryDoRender(AdminInterceptor.java:96)\\\\n\\\\tat com.zrlog.admin.web.interceptor.AdminInterceptor.adminPermission(AdminInterceptor.java:66)\\\\n\\\\tat com.zrlog.admin.web.interceptor.AdminInterceptor.intercept(AdminInterceptor.java:34)\\\\n\\\\tat com.zrlog.web.inteceptor.RouterInterceptor.intercept(RouterInterceptor.java:28)\\\\n\\\\tat com.jfinal.aop.Invocation.invoke(Invocation.java:91)\\\\n\\\\tat com.zrlog.blog.web.interceptor.MyI18nInterceptor.intercept(MyI18nInterceptor.java:22)\\\\n\\\\tat com.jfinal.aop.Invocation.invoke(Invocation.java:91)\\\\n\\\\tat com.zrlog.blog.web.interceptor.InitDataInterceptor.doIntercept(InitDataInterceptor.java:34)\\\\n\\\\tat com.zrlog.blog.web.interceptor.InitDataInterceptor.intercept(InitDataInterceptor.java:39)\\\\n\\\\tat com.jfinal.aop.Invocation.invoke(Invocation.java:91)\\\\n\\\\tat com.jfinal.core.ActionHandler.handle(ActionHandler.java:96)\\\\n\\\\tat com.zrlog.blog.web.handler.PluginHandler.handle(PluginHandler.java:38)\\\\n\\\\tat com.zrlog.blog.web.handler.BlogArticleHandler.handle(BlogArticleHandler.java:42)\\\\n\\\\tat com.zrlog.blog.web.handler.GlobalResourceHandler.handle(GlobalResourceHandler.java:61)\\\\n\\\\tat com.jfinal.core.JFinalFilter.doFilter(JFinalFilter.java:90)\\\\n\\\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)\\\\n\\\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)\\\\n\\\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)\\\\n\\\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\\\n\\\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\\\\n\\\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)\\\\n\\\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\\\n\\\\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:687)\\\\n\\\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\\\n\\\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)\\\\n\\\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)\\\\n\\\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\\\n\\\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)\\\\n\\\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1789)\\\\n\\\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\\\\n\\\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\\\\n\\\\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\\\\n\\\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\\\n\\\\tat java.base/java.lang.Thread.run(Thread.java:833)\\\\nCaused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $\\\\n\\\\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)\\\\n\\\\tat com.google.gson.Gson.fromJson(Gson.java:932)\\\\n\\\\tat com.google.gson.Gson.fromJson(Gson.java:897)\\\\n\\\\tat com.google.gson.Gson.fromJson(Gson.java:846)\\\\n\\\\tat com.google.gson.Gson.fromJson(Gson.java:817)\\\\n\\\\tat com.zrlog.util.ZrLogUtil.convertRequestBody(ZrLogUtil.java:38)\\\\n\\\\t... 39 more\\\\nCaused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $\\\\n\\\\tat com.google.gson.stream.JsonReader.beginObject(JsonReader.java:386)\\\\n\\\\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:215)\\\\n\\\\t... 44 more\\\\n', 'message': 'com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $', 'error': 9999}, 'cookies': {'admin-token': '1#357051304736335749314B68675879356A57435733463435696A597A5171704B44532B6742345049704B6D6F63315A74324A43676C6C4E336E72476A6B6F5A5776422B4D7A464F2F5768345043772B4A56716A42693252744C306B4758536F346732554144562F704165553D'}},\\n\"}"}], "start": 1659602423219, "stop": 1659602423219, "uuid": "219fdfc8-891d-4f1c-8ebe-a4acf451dfb8", "historyId": "aba17ccd8afe157b05c4fad54810bdb7", "testCaseId": "71937e17d847f0126e9c3a71a7302b2b", "fullName": "testcase.test_zr.Test_zrlog#test_Login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_zr"}, {"name": "subSuite", "value": "Test_zrlog"}, {"name": "host", "value": "PC-20200812QIHW"}, {"name": "thread", "value": "32160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_zr"}]}